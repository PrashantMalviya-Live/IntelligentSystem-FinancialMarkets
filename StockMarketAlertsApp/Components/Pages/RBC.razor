@page "/rbcalgo"
@inject AlgoClient AlClient
@inject MarketClient MClient
@inject NavigationManager NavigationManager
@* @inject GrpcService grpcService *@

@rendermode InteractiveServer


<h3>Range Break Out Algo </h3>
<AlertComponent />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="@paInput" FormName="paInputform" OnSubmit="StartAlgo">
            <div class="mb-3">
                <label for="btoken" class="form-label">Base Token:</label>

                <select @onchange="OnSelectionChanged">
                    @foreach (var item in BaseInstruments)
                    {
                        <option value=@item.Key,@item.Value selected="@(item.Key == @paInput.BToken)">@item.Value</option>
                    }

                </select>

                @* <InputText class="form-control" @bind-Value="paInput.BToken" id="btoken" /> *@
            </div> 
            
            <div class="mb-3">
                <label for="ctf" class="form-label">Time Frame (in mins):</label>
                <InputNumber class="form-control" @bind-Value="paInput.CTF" id="ctf" />
            </div>
            <div class="mb-3">
                <label for="qty" class="form-label">Quantity:</label>
                <InputNumber class="form-control" @bind-Value="paInput.Qty" id="qty" />
            </div>
            <div class="mb-3">
                <label for="expiry" class="form-label">Expiry:</label>
                @* <InputText class="form-control" @bind-Value="paInput.Expiry" id="expiry" /> *@
                <select @onchange="OnSelectionChanged">
                    @foreach (var item in InstrumentExpiries)
                    {
                        <option value=@item,@item selected="@(item == @paInput.Expiry)">@item</option>
                    }

                </select>

            </div>
            <div class="mb-3">
                <label for="uid" class="form-label">User Id:</label>
                <InputText class="form-control" @bind-Value="paInput.UID" id="uid" />
            </div>

            @if (algoRunning)
            {
                <div class="alert alert-success">
                    <strong>Success!</strong> Algo Started.
                </div>
            }
            else
            {
                <button class="btn btn-primary">Start Algo</button>
            }

        </EditForm>
    </div>
</div>

@* <button class="btn btn-primary" @onclick="StartAlgo">Start Algo</button> *@


@code 
{
    private PriceActionInput? paInput { get; set; } = new() { BToken = 260105 };

    public static Dictionary<uint, string>? BaseInstruments = new Dictionary<uint, string>() { { 260105, "NIFTY" }, { 256265, "BANKNIFTY" } };
    public static List<DateTime>? InstrumentExpiries = new() { };
    private bool algoRunning = false;
    private async Task StartAlgo()
    {
        // This will start the RBC Alert Algo
        algoRunning = await AlClient.StartAlgo(algoId:1, paInput);

        // grpcService.LoggerMessageEvent += GrpcClient_LoggerMessageEvent;
        // grpcService.OrderAlerterEvent += GrpcClient_OrderAlerterEvent;
    }

    private void GrpcClient_OrderAlerterEvent(GrpcProtos.OrderMessage orderMessage)
    {
    }

    private void GrpcClient_LoggerMessageEvent(GrpcProtos.LogMessage logMessage)
    {
    }

    protected override async Task OnInitializedAsync()
    {
        // var baseInstruments = await MClient.GetFnOBaseInstrumentsAsync();
        // BaseInstruments = baseInstruments.ToDictionary(x => x.Id.ToString(), x => x.TradingSymbol);

        var instrumentExpiries = await AlClient.GetInstrumentExpiriesAsync(paInput.BToken);
        InstrumentExpiries = instrumentExpiries.ToList();
        paInput.Expiry = InstrumentExpiries[0];
    }



    // private bool _firstRender = true;
    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         GrpcService.AlertGenerated += ShowNotification;
    //     }
    // }


    private async Task OnSelectionChanged(ChangeEventArgs e)
    {
        var kv = e.Value.ToString().Split(',');

        var selectedValue = kv[0];

        // SelectedItem = Items.FirstOrDefault(item => item.Key == selectedValue).Key.ToString();
        // _selectedItemText = SelectedItem;
        // _isEditing = false;

        // if (SelectedItemChanged.HasDelegate)
        // {
        //     await SelectedItemChanged.InvokeAsync(SelectedItem);
        // }
    }
   
}
