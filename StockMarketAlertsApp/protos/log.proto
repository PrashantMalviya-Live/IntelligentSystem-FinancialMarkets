syntax = "proto3";

option csharp_namespace = "GrpcProtos";

import "google/protobuf/timestamp.proto";

package logging;



// The logging service definition.
service Logger {
  rpc Log (stream Status) returns (stream LogMessage);
}
// The request message containing the algo identifier
//message AlgoInstance {
//  int32 algoId = 1;
//  int32 algo_instance = 2;
//}

// The response message containing the log messages
message LogMessage {
	string algoId = 1;
	int32 algo_instance = 2;  
	google.protobuf.Timestamp log_time = 3;
	string log_level = 4;
	string message = 5;
	string messenger_method = 6;
}

// The response message containing the log messages
message Status {
  bool status = 1;
}



// The logging service definition.
service OrderAlerter {
  rpc Publish (stream PublishStatus) returns (stream OrderMessage);
}

// The response message containing the log messages
message OrderMessage {
  string orderid = 1;
	uint32 instrumentToken = 2;
	string tradingSymbol = 3;  
	string transactionType = 4;  
	double price = 5;  
	int32 quantity = 6;  
	double triggerPrice = 7;  
	string status = 8;  
	string statusMessage = 9;  
	string algorithm = 10;  
	int32 algoInstance = 11;  
	google.protobuf.Timestamp orderTime = 12;  
	string orderType = 13;
}

// The response message containing the log messages
message PublishStatus {
  bool status = 1;
}


// The logging service definition.
service Charter {
  rpc DrawChart (stream CStatus) returns (stream CData);
}


// The response message containing the log messages
message CData {
	string algoId = 1;
	int32 algo_instance = 2;
	int32 chartId = 3;
	int32 chartdataId = 4;
	//time
	google.protobuf.Timestamp t = 5;
	uint32 instrumentToken = 6;
	//data to plot
	double d = 7;
	string xlabel = 8;
	string ylabel = 9;
	string arg = 10;
	double arg2 = 11;
}

// The response message containing the log messages
message CStatus {
  bool status = 1;
}


// The logging service definition.
service AlertManager {
  rpc Alert (stream AlertStatus) returns (stream AlertMessage);
}

// The response message containing the log messages
message AlertMessage {
	int32 id = 1;
	int32 alertTriggerId = 2;  
	uint32 instrumentToken = 3;
	string tradingSymbol = 4;
	int32 candleTimeSpan = 5;
	string userId = 6;
	string message = 7;
	double price = 8;
}

// The response message containing the log messages
message AlertStatus {
  bool status = 1;
}