{"ast":null,"code":"// package: logging\n// file: src/app/protos/log.proto\n\nvar src_app_protos_log_pb = require(\"src/app/generated/log_pb\");\nvar grpc = require(\"@improbable-eng/grpc-web\").grpc;\nvar Logger = function () {\n  function Logger() {}\n  Logger.serviceName = \"logging.Logger\";\n  return Logger;\n}();\nLogger.Log = {\n  methodName: \"Log\",\n  service: Logger,\n  requestStream: true,\n  responseStream: true,\n  requestType: src_app_protos_log_pb.Status,\n  responseType: src_app_protos_log_pb.LogMessage\n};\nexports.Logger = Logger;\nfunction LoggerClient(serviceHost, options) {\n  this.serviceHost = serviceHost;\n  this.options = options || {};\n}\nLoggerClient.prototype.log = function log(metadata) {\n  var listeners = {\n    data: [],\n    end: [],\n    status: []\n  };\n  var client = grpc.client(Logger.Log, {\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport\n  });\n  client.onEnd(function (status, statusMessage, trailers) {\n    listeners.status.forEach(function (handler) {\n      handler({\n        code: status,\n        details: statusMessage,\n        metadata: trailers\n      });\n    });\n    listeners.end.forEach(function (handler) {\n      handler({\n        code: status,\n        details: statusMessage,\n        metadata: trailers\n      });\n    });\n    listeners = null;\n  });\n  client.onMessage(function (message) {\n    listeners.data.forEach(function (handler) {\n      handler(message);\n    });\n  });\n  client.start(metadata);\n  return {\n    on: function (type, handler) {\n      listeners[type].push(handler);\n      return this;\n    },\n    write: function (requestMessage) {\n      client.send(requestMessage);\n      return this;\n    },\n    end: function () {\n      client.finishSend();\n    },\n    cancel: function () {\n      listeners = null;\n      client.close();\n    }\n  };\n};\nexports.LoggerClient = LoggerClient;\nvar OrderAlerter = function () {\n  function OrderAlerter() {}\n  OrderAlerter.serviceName = \"logging.OrderAlerter\";\n  return OrderAlerter;\n}();\nOrderAlerter.Publish = {\n  methodName: \"Publish\",\n  service: OrderAlerter,\n  requestStream: true,\n  responseStream: true,\n  requestType: src_app_protos_log_pb.PublishStatus,\n  responseType: src_app_protos_log_pb.OrderMessage\n};\nexports.OrderAlerter = OrderAlerter;\nfunction OrderAlerterClient(serviceHost, options) {\n  this.serviceHost = serviceHost;\n  this.options = options || {};\n}\nOrderAlerterClient.prototype.publish = function publish(metadata) {\n  var listeners = {\n    data: [],\n    end: [],\n    status: []\n  };\n  var client = grpc.client(OrderAlerter.Publish, {\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport\n  });\n  client.onEnd(function (status, statusMessage, trailers) {\n    listeners.status.forEach(function (handler) {\n      handler({\n        code: status,\n        details: statusMessage,\n        metadata: trailers\n      });\n    });\n    listeners.end.forEach(function (handler) {\n      handler({\n        code: status,\n        details: statusMessage,\n        metadata: trailers\n      });\n    });\n    listeners = null;\n  });\n  client.onMessage(function (message) {\n    listeners.data.forEach(function (handler) {\n      handler(message);\n    });\n  });\n  client.start(metadata);\n  return {\n    on: function (type, handler) {\n      listeners[type].push(handler);\n      return this;\n    },\n    write: function (requestMessage) {\n      client.send(requestMessage);\n      return this;\n    },\n    end: function () {\n      client.finishSend();\n    },\n    cancel: function () {\n      listeners = null;\n      client.close();\n    }\n  };\n};\nexports.OrderAlerterClient = OrderAlerterClient;\nvar Charter = function () {\n  function Charter() {}\n  Charter.serviceName = \"logging.Charter\";\n  return Charter;\n}();\nCharter.DrawChart = {\n  methodName: \"DrawChart\",\n  service: Charter,\n  requestStream: true,\n  responseStream: true,\n  requestType: src_app_protos_log_pb.CStatus,\n  responseType: src_app_protos_log_pb.CData\n};\nexports.Charter = Charter;\nfunction CharterClient(serviceHost, options) {\n  this.serviceHost = serviceHost;\n  this.options = options || {};\n}\nCharterClient.prototype.drawChart = function drawChart(metadata) {\n  var listeners = {\n    data: [],\n    end: [],\n    status: []\n  };\n  var client = grpc.client(Charter.DrawChart, {\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport\n  });\n  client.onEnd(function (status, statusMessage, trailers) {\n    listeners.status.forEach(function (handler) {\n      handler({\n        code: status,\n        details: statusMessage,\n        metadata: trailers\n      });\n    });\n    listeners.end.forEach(function (handler) {\n      handler({\n        code: status,\n        details: statusMessage,\n        metadata: trailers\n      });\n    });\n    listeners = null;\n  });\n  client.onMessage(function (message) {\n    listeners.data.forEach(function (handler) {\n      handler(message);\n    });\n  });\n  client.start(metadata);\n  return {\n    on: function (type, handler) {\n      listeners[type].push(handler);\n      return this;\n    },\n    write: function (requestMessage) {\n      client.send(requestMessage);\n      return this;\n    },\n    end: function () {\n      client.finishSend();\n    },\n    cancel: function () {\n      listeners = null;\n      client.close();\n    }\n  };\n};\nexports.CharterClient = CharterClient;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}