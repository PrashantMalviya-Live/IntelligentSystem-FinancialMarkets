{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let TradeService = /*#__PURE__*/(() => {\n  var _class;\n  class TradeService {\n    constructor(http, baseUrl) {\n      this.http = http;\n      this.subj = new BehaviorSubject([]);\n      this._baseUrl = baseUrl;\n    }\n    returnAsObservable() {\n      return this.subj.asObservable();\n    }\n    GetExchangeData() {\n      let subject = this.subj;\n      if (typeof EventSource !== 'undefined') {\n        this.evs = new EventSource(this._baseUrl + 'api/position/1');\n        this.evs.onopen = function (e) {\n          console.log(\"Opening connection.Ready State is \" + this.readyState);\n        };\n        this.evs.onmessage = function (e) {\n          console.log(\"Message Received.Ready State is \" + this.readyState);\n          subject.next(e.data);\n        };\n        this.evs.addEventListener(\"timestamp\", function (e) {\n          console.log(\"Timestamp event Received.Ready State is \" + this.readyState);\n          subject.next(e[\"data\"]);\n        });\n        this.evs.onerror = function (e) {\n          console.log(e);\n          if (this.readyState == 0) {\n            console.log(\"Reconnecting…\");\n          }\n        };\n      }\n    }\n    stopExchangeUpdates() {\n      this.evs.close();\n    }\n  }\n  _class = TradeService;\n  _class.ɵfac = function TradeService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: 'root'\n  });\n  return TradeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}