{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Component, Inject } from '@angular/core';\nimport { Instrument } from '../data/instrument';\nimport { AlgoHealth } from '../data/health';\nimport { Validators } from '@angular/forms';\nimport { Loglevel, AlgoControllers, RunningAlgos } from '../data/constants';\nimport { ErrorDialog } from './error.component';\n//import { TimeToStringPipe } from './TimeToString.Pipe';\nimport { grpc } from \"@improbable-eng/grpc-web\";\nimport { Logger, Charter } from \"../generated/log_pb_service\";\nimport { Status, CStatus } from \"../generated/log_pb\";\nimport { OrderAlerter } from \"../generated/log_pb_service\";\nimport { PublishStatus } from \"../generated/log_pb\";\nimport { Chart } from 'chart.js';\nimport * as moment from 'moment';\nimport { BehaviorSubject } from 'rxjs';\nimport { Howl } from \"../../../node_modules/howler/dist/howler.js\";\nexport let TradeComponent = class TradeComponent {\n  constructor(http, formBuilder, baseUrl, ts, dialog, _snackBar) {\n    this.http = http;\n    this.formBuilder = formBuilder;\n    this.ts = ts;\n    this.dialog = dialog;\n    this._snackBar = _snackBar;\n    this.selectedInstrument = new Instrument(0, '--Select--');\n    this.cds = [];\n    this.charts = [];\n    this.logs = [];\n    this.algosHealth = [];\n    this.client = grpc.client(Logger.Log, {\n      host: 'https://localhost:5001'\n    });\n    this.oclient = grpc.client(OrderAlerter.Publish, {\n      host: 'https://localhost:5001'\n    });\n    this.cclient = grpc.client(Charter.DrawChart, {\n      host: 'https://localhost:5001'\n    });\n    this.displayedColumns = ['orderTime', 'tradingSymbol', 'price', 'quantity', 'transactionType', 'orderType', 'status'];\n    this.dataSource = this.orders;\n    this._ras = [];\n    this.subj = new BehaviorSubject(this.log);\n    this.osubj = new BehaviorSubject(this.porder);\n    this.alsubj = new BehaviorSubject(this._ra);\n    this.csubj = new BehaviorSubject(this.cdata);\n    //algo panel section\n    this.panelOpenState = false;\n    this._baseUrl = baseUrl; //+ 'trade/';\n    //get Instruments\n    http.get(baseUrl + 'api/momentumvolume').subscribe(result => {\n      this.instrument = result;\n    }, error => console.error(error));\n    //get Instruments\n    http.get(baseUrl + 'api/rsicross').subscribe(result => {\n      this.instrument = result;\n    }, error => console.error(error));\n    http.get(baseUrl + 'api/emacross').subscribe(result => {\n      this.instrument = result;\n    }, error => console.error(error));\n    http.get(baseUrl + 'api/straddle').subscribe(result => {\n      this.instrument = result;\n    }, error => console.error(error));\n    http.get(baseUrl + 'api/deltastrangle').subscribe(result => {\n      this.instrument = result;\n    }, error => console.error(error));\n    http.get(baseUrl + 'api/activebuystrangle').subscribe(result => {\n      this.instrument = result;\n    }, error => console.error(error));\n    http.get(baseUrl + 'api/alert').subscribe(result => {\n      this.instrument = result;\n    }, error => console.error(error));\n    http.get(baseUrl + 'api/momentumstraddle').subscribe(result => {\n      this.instrument = result;\n    }, error => console.error(error));\n    //get Instruments\n    http.get(baseUrl + 'api/expirystrangle').subscribe(result => {\n      this.instrument = result;\n    }, error => console.error(error));\n    //get Instruments\n    http.get(baseUrl + 'api/stranglewithlevels').subscribe(result => {\n      this.instrument = result;\n    }, error => console.error(error));\n    //get Instruments\n    http.get(baseUrl + 'api/straddleexpirytrade').subscribe(result => {\n      this.instrument = result;\n    }, error => console.error(error));\n    //get Instruments\n    http.get(baseUrl + 'api/optionoptimizer').subscribe(result => {\n      this.instrument = result;\n    }, error => console.error(error));\n    //get Instruments\n    http.get(baseUrl + 'api/rsistrangle').subscribe(result => {\n      this.instrument = result;\n    }, error => console.error(error));\n    http.get(baseUrl + 'api/rsitrade').subscribe(result => {\n      this.instrument = result;\n    }, error => console.error(error));\n    http.get(baseUrl + 'api/premiumcross').subscribe(result => {\n      this.instrument = result;\n    }, error => console.error(error));\n    http.get(baseUrl + 'api/priceaction').subscribe(result => {\n      this.instrument = result;\n    }, error => console.error(error));\n    http.get(baseUrl + 'api/initialbreakout').subscribe(result => {\n      this.instrument = result;\n    }, error => console.error(error));\n    http.get(baseUrl + 'api/ivtrade').subscribe(result => {\n      this.instrument = result;\n    }, error => console.error(error));\n    http.get(baseUrl + 'api/calendarspread').subscribe(result => {\n      this.instrument = result;\n    }, error => console.error(error));\n    http.get(baseUrl + 'api/directionaloptionsell').subscribe(result => {\n      this.instrument = result;\n    }, error => console.error(error));\n    http.get(baseUrl + 'api/chart').subscribe(result => {\n      this.instrument = result;\n    }, error => console.error(error));\n    http.get(baseUrl + 'api/momentumvolume/activealgos').subscribe(result => {\n      if (this.orders == null) {\n        this.activeAlgos = result;\n      } else {\n        this.activeAlgos.push(result);\n      }\n    }, error => console.error(error));\n    http.get(baseUrl + 'api/rsicross/activealgos').subscribe(result => {\n      if (this.orders == null) {\n        this.activeAlgos = result;\n      } else {\n        this.activeAlgos.push(result);\n      }\n    }, error => console.error(error));\n    http.get(baseUrl + 'api/emacross/activealgos').subscribe(result => {\n      if (this.orders == null) {\n        this.activeAlgos = result;\n      } else {\n        this.activeAlgos.push(result);\n      }\n    }, error => console.error(error));\n    http.get(baseUrl + 'api/rsistrangle/activealgos').subscribe(result => {\n      if (this.orders == null) {\n        this.activeAlgos = result;\n      } else {\n        this.activeAlgos.push(result);\n      }\n    }, error => console.error(error));\n    http.get(baseUrl + 'api/rsitrade/activealgos').subscribe(result => {\n      if (this.orders == null) {\n        this.activeAlgos = result;\n      } else {\n        this.activeAlgos.push(result);\n      }\n    }, error => console.error(error));\n    http.get(baseUrl + 'api/optionsellonht/activealgos').subscribe(result => {\n      if (this.orders == null) {\n        this.activeAlgos = result;\n      } else {\n        this.activeAlgos.push(result);\n      }\n    }, error => console.error(error));\n    http.get(baseUrl + 'api/activebuystrangle/activealgos').subscribe(result => {\n      if (this.orders == null) {\n        this.activeAlgos = result;\n      } else {\n        this.activeAlgos.push(result);\n      }\n    }, error => console.error(error));\n    http.get(baseUrl + 'api/stranglewithlevels/activealgos').subscribe(result => {\n      if (this.orders == null) {\n        this.activeAlgos = result;\n      } else {\n        this.activeAlgos.push(result);\n      }\n    }, error => console.error(error));\n    http.get(baseUrl + 'api/expirystrangle/activealgos').subscribe(result => {\n      if (this.orders == null) {\n        this.activeAlgos = result;\n      } else {\n        this.activeAlgos.push(result);\n      }\n    }, error => console.error(error));\n    http.get(baseUrl + 'api/priceaction/activealgos').subscribe(result => {\n      if (this.orders == null) {\n        this.activeAlgos = result;\n      } else {\n        this.activeAlgos.push(result);\n      }\n    }, error => console.error(error));\n    http.get(baseUrl + 'api/optionoptimizer/activealgos').subscribe(result => {\n      if (this.orders == null) {\n        this.activeAlgos = result;\n      } else {\n        this.activeAlgos.push(result);\n      }\n    }, error => console.error(error));\n    http.get(baseUrl + 'api/straddleexpirytrade/activealgos').subscribe(result => {\n      if (this.orders == null) {\n        this.activeAlgos = result;\n      } else {\n        this.activeAlgos.push(result);\n      }\n    }, error => console.error(error));\n    var context = new AudioContext();\n    this._sound = new Howl({\n      src: ['../assets/stop.mp3'],\n      autoplay: false,\n      loop: false,\n      volume: 0.5,\n      onend: function () {\n        console.log('Finished!');\n      }\n    });\n    context.resume();\n  }\n  returnAsObservable() {\n    return this.subj.asObservable();\n  }\n  orderAsObservable() {\n    return this.osubj.asObservable();\n  }\n  algoAsObservable() {\n    return this.alsubj.asObservable();\n  }\n  chartAsObservable() {\n    return this.csubj.asObservable();\n  }\n  filterLogsOfType(type) {\n    return this.logs.filter(x => x.algoInstance == type.ains);\n  }\n  //filterChartsOfType(type) {\n  //  var cd = this.cds.filter(x => x.algoInstance == type.ains);\n  //  cd.forEach((cdi) => { \n  //    this.loadchartdata(cdi);\n  //  });\n  //}\n  filterbyname(ctrl) {\n    //return this._ras.filter(x => x._algoCrtl == ctrl);\n    //this._ras.findIndex(x => x._algoCtrl == '171')\n    if (this._ras !== undefined && this._ras.findIndex(x => x !== undefined && x._algoCtrl == ctrl) >= 0) {\n      return true;\n    } else return false;\n  }\n  ngOnInit() {\n    let subject = this.subj;\n    let osubject = this.osubj;\n    let asubject = this.alsubj;\n    let csubject = this.csubj;\n    //this.selectedInst.value = 260105;\n    for (var algo in AlgoControllers) {\n      this.http.get(this._baseUrl + 'api/' + algo + '/healthy').subscribe(result => {\n        let ra = new RunningAlgos();\n        // this._ra = new RunningAlgos();\n        // this._ra._isRunning = result;\n        // this._ra._algoCrtl = algo;\n        //// this._ras.push(this._ra);\n        // asubject.next(this._ra);\n        //ra._isRunning = result;\n        ra._algoCtrl = result;\n        this._ras.push(ra);\n        asubject.next(ra);\n      }, error => {\n        //let ra = new RunningAlgos();\n        //// this._ra = new RunningAlgos();\n        //// this._ra._isRunning = result;\n        //// this._ra._algoCrtl = algo;\n        ////// this._ras.push(this._ra);\n        //// asubject.next(this._ra);\n        //ra._isRunning = false;\n        //ra._algoCrtl = algo;\n        //// this._ras.push(this._ra);\n        //asubject.next(ra);\n      });\n    }\n    window.setInterval(this.checkhealth, 60001, this.algosHealth);\n    this.onSelectInstrument(this.selectedInstrument.instrumentToken, this._ctrl);\n    this.momentumTradeOptionsForm = this.formBuilder.group({\n      ctf: ['', Validators.required],\n      quantity: ['', Validators.required],\n      mlpt: ['', Validators.required]\n      //,ps: ['', Validators.required]\n    });\n\n    this.rsiCrossOptionsForm = this.formBuilder.group({\n      ctf: ['', Validators.required],\n      qty: ['', Validators.required],\n      rmx: ['', Validators.required],\n      maxdfbi: ['', Validators.required],\n      mindfbi: ['', Validators.required]\n    });\n    this.emaCrossOptionsForm = this.formBuilder.group({\n      ctf: ['', Validators.required],\n      qty: ['', Validators.required],\n      sema: ['', Validators.required],\n      lema: ['', Validators.required],\n      sl: ['', Validators.required],\n      tp: ['', Validators.required]\n    });\n    this.straddleMomentumOptionsForm = this.formBuilder.group({\n      ctf: [5, Validators.required],\n      qty: [1, Validators.required],\n      sl: [50, Validators.required],\n      tr: [100, Validators.required],\n      ss: [false, Validators.required]\n    });\n    this.estForm = this.formBuilder.group({\n      ctf: [15, Validators.required],\n      qty: [6, Validators.required],\n      sl: [50, Validators.required],\n      tp: [100, Validators.required],\n      tr: [2, Validators.required],\n      spi: [100, Validators.required],\n      uid: ['', Validators.required],\n      intd: [true, Validators.required]\n    });\n    this.sarForm = this.formBuilder.group({\n      qty: ['1', Validators.required],\n      sl: [20, Validators.required],\n      tpr: [10, Validators.required],\n      th: [30, Validators.required],\n      vt: [300, Validators.required],\n      fo: ['', Validators.required]\n    });\n    this.straddleOnIndexRangeForm = this.formBuilder.group({\n      qty: ['', Validators.required],\n      sl: ['', Validators.required],\n      tr: ['', Validators.required],\n      uid: ['', Validators.required]\n    });\n    this.straddleForm = this.formBuilder.group({\n      qty: ['', Validators.required],\n      uid: ['', Validators.required]\n    });\n    this.deltaStrangleForm = this.formBuilder.group({\n      iqty: [2, Validators.required],\n      stepqty: [1, Validators.required],\n      maxqty: [4, Validators.required],\n      idelta: [0.35, Validators.required],\n      nx: [1, Validators.required],\n      ridelta: [0.29, Validators.required],\n      maxdelta: [0.39, Validators.required],\n      mindelta: [0.25, Validators.required],\n      sl: [5000, Validators.required],\n      tp: [100000, Validators.required],\n      l1: [0, Validators.required],\n      l2: [0, Validators.required],\n      u1: [0, Validators.required],\n      u2: [0, Validators.required]\n    });\n    this.paWithLevelsForm = this.formBuilder.group({\n      ctf: [5, Validators.required],\n      uid: ['', Validators.required],\n      pd_h: [0, Validators.required],\n      pd_l: [0, Validators.required],\n      pd_c: [0, Validators.required],\n      pw_h: [0, Validators.required],\n      pw_l: [0, Validators.required],\n      pw_c: [0, Validators.required],\n      ps_h: [0, Validators.required],\n      ps_l: [0, Validators.required],\n      sl: [5000, Validators.required],\n      tp: [100000, Validators.required],\n      qty: [1, Validators.required],\n      pd_bh: ['', Validators.required],\n      pd_bl: ['', Validators.required]\n    });\n    this.optionsellonhtForm = this.formBuilder.group({\n      ctf: [5, Validators.required],\n      uid: ['', Validators.required],\n      tp: [100000, Validators.required],\n      qty: [1, Validators.required],\n      intd: [true, Validators.required]\n    });\n    this.multitimeframesellonhtForm = this.formBuilder.group({\n      ctf: [5, Validators.required],\n      uid: ['', Validators.required],\n      tp: [100000, Validators.required],\n      qty: [1, Validators.required]\n    });\n    this.tj3Form = this.formBuilder.group({\n      ctf: [5, Validators.required],\n      uid: ['', Validators.required],\n      pd_h: [0, Validators.required],\n      pd_l: [0, Validators.required],\n      pd_c: [0, Validators.required],\n      pw_h: [0, Validators.required],\n      pw_l: [0, Validators.required],\n      pw_c: [0, Validators.required],\n      ps_h: [0, Validators.required],\n      ps_l: [0, Validators.required],\n      sl: [5000, Validators.required],\n      tp: [100000, Validators.required],\n      qty: [1, Validators.required],\n      pd_bh: ['', Validators.required],\n      pd_bl: ['', Validators.required]\n    });\n    this.tj4Form = this.formBuilder.group({\n      ctf: [5, Validators.required],\n      uid: ['', Validators.required],\n      pd_h: [0, Validators.required],\n      pd_l: [0, Validators.required],\n      pd_c: [0, Validators.required],\n      pw_h: [0, Validators.required],\n      pw_l: [0, Validators.required],\n      pw_c: [0, Validators.required],\n      ps_h: [0, Validators.required],\n      ps_l: [0, Validators.required],\n      sl: [5000, Validators.required],\n      tp: [100000, Validators.required],\n      qty: [1, Validators.required],\n      pd_bh: ['', Validators.required],\n      pd_bl: ['', Validators.required]\n    });\n    this.tj5Form = this.formBuilder.group({\n      ctf: [5, Validators.required],\n      uid: ['', Validators.required],\n      sl: [5000, Validators.required],\n      tp: [100000, Validators.required],\n      qty: [1, Validators.required]\n    });\n    this.bcForm = this.formBuilder.group({\n      ctf: [15, Validators.required],\n      uid: ['', Validators.required],\n      tp: [40, Validators.required]\n      //, sl: [5000, Validators.required]\n      ,\n\n      qty: [3, Validators.required]\n    });\n    this.bc2Form = this.formBuilder.group({\n      ctf: [5, Validators.required],\n      uid: ['', Validators.required],\n      tp: [100000, Validators.required]\n      //, sl: [5000, Validators.required]\n      ,\n\n      qty: [1, Validators.required]\n    });\n    this.paScalpingForm = this.formBuilder.group({\n      uid: ['', Validators.required],\n      ctf: [3, Validators.required],\n      qty: [1, Validators.required]\n    });\n    this.simForm = this.formBuilder.group({\n      uid: ['', Validators.required],\n      ctf: [15, Validators.required],\n      qty: [1, Validators.required],\n      mns: [1, Validators.required],\n      tp: [10000, Validators.required],\n      slpt: [0.5, Validators.required]\n    });\n    this.maForm = this.formBuilder.group({\n      uid: ['', Validators.required],\n      ctf: [5, Validators.required],\n      qty: [1, Validators.required],\n      mns: [1, Validators.required],\n      tp: [10000, Validators.required],\n      slpt: [0.5, Validators.required]\n    });\n    this.ibForm = this.formBuilder.group({\n      uid: ['', Validators.required],\n      ctf: [15, Validators.required],\n      qty: [1, Validators.required]\n    });\n    this.activeBuyStrangleForm = this.formBuilder.group({\n      iqty: [1, Validators.required],\n      stepqty: [1, Validators.required],\n      maxqty: [10, Validators.required],\n      idelta: [0.35, Validators.required],\n      maxdelta: [0.39, Validators.required],\n      mindelta: [0.25, Validators.required],\n      sl: [5000, Validators.required],\n      tp: [100000, Validators.required]\n    });\n    this.generateAlertForm = this.formBuilder.group({\n      ctf: [15, Validators.required],\n      csp: [0.5, Validators.required]\n    });\n    this.premiumCrossForm = this.formBuilder.group({\n      qty: ['', Validators.required],\n      tp: ['', Validators.required]\n    });\n    this.expiryStrangleForm = this.formBuilder.group({\n      iqty: [4, Validators.required],\n      sqty: [1, Validators.required],\n      mqty: [8, Validators.required],\n      tp: [5000, Validators.required],\n      sl: [2000, Validators.required],\n      idfbi: [100, Validators.required],\n      mdfbi: [-100, Validators.required],\n      mptt: [15, Validators.required]\n    });\n    this.levelsStrangleForm = this.formBuilder.group({\n      iqty: [4, Validators.required],\n      sqty: [2, Validators.required],\n      mqty: [8, Validators.required],\n      tp: [5000, Validators.required],\n      sl: [2000, Validators.required],\n      idelta: [0.2, Validators.required],\n      mindelta: [0.1, Validators.required],\n      maxdelta: [0.3, Validators.required],\n      l1: ['', Validators.required],\n      l2: ['', Validators.required],\n      u1: ['', Validators.required],\n      u2: ['', Validators.required],\n      iday: [1, Validators.required],\n      ctf: [120, Validators.required]\n    });\n    this.ivSpreadForm = this.formBuilder.group({\n      qty: ['', Validators.required],\n      tp: ['', Validators.required]\n    });\n    this.calendarSpreadForm = this.formBuilder.group({\n      ovar: ['', Validators.required],\n      cvar: ['', Validators.required],\n      sqty: ['', Validators.required],\n      maxqty: ['', Validators.required],\n      sl: ['', Validators.required],\n      tp: ['', Validators.required],\n      straddle: [false, Validators.required]\n    });\n    this.directiononhistoricalaverageForm = this.formBuilder.group({\n      ovar: ['', Validators.required],\n      cvar: ['', Validators.required],\n      sqty: ['', Validators.required],\n      maxqty: ['', Validators.required],\n      sl: ['', Validators.required],\n      tp: ['', Validators.required]\n    });\n    this.strangleChartForm = this.formBuilder.group({\n      oic: ['', Validators.required],\n      cmb: ['', Validators.required],\n      ivc: ['', Validators.required],\n      s1: ['', Validators.required],\n      s2: ['', Validators.required],\n      it1: ['', Validators.required],\n      it2: ['', Validators.required]\n    });\n    this.expiryTradeOptionsForm = this.formBuilder.group({\n      iqty: ['', Validators.required],\n      sqty: ['', Validators.required],\n      mqty: ['', Validators.required],\n      sl: ['', Validators.required],\n      mdfbi: ['', Validators.required],\n      mptt: ['', Validators.required]\n      //,ps: ['', Validators.required]\n    });\n\n    this.sellwithRSIOptionsForm = this.formBuilder.group({\n      qty: ['', Validators.required],\n      ctf: ['', Validators.required],\n      rlle: ['', Validators.required],\n      rule: ['', Validators.required],\n      rlx: ['', Validators.required],\n      rmx: ['', Validators.required],\n      maxdfbi: ['', Validators.required],\n      mindfbi: ['', Validators.required],\n      ema: ['', Validators.required]\n    });\n    this.buywithRSIOptionsForm = this.formBuilder.group({\n      qty: ['', Validators.required],\n      ctf: [5, Validators.required],\n      maxdfbi: [225, Validators.required],\n      edchl: [0, Validators.required],\n      xdchl: [80, Validators.required],\n      ema: [13, Validators.required],\n      tp: [200, Validators.required],\n      sl: [0, Validators.required],\n      rulx: [80, Validators.required],\n      rlle: [20, Validators.required],\n      cell: ['', Validators.required],\n      peul: ['', Validators.required],\n      eac: [true, Validators.required],\n      fut: [false, Validators.required]\n    });\n    this.returnAsObservable().subscribe(data => {\n      if (data !== undefined) {\n        if (data.logLevel === Loglevel.Health.toString()) {\n          var selectedAlgoIndex = this.algosHealth.findIndex(x => x.aIns === data.algoInstance);\n          var rs = data.message == \"1\" ? true : false;\n          if (selectedAlgoIndex != -1) {\n            if (this.algosHealth[selectedAlgoIndex].ah === true && rs === false) {\n              this._sound.play();\n            }\n            this.algosHealth[selectedAlgoIndex].ah = rs;\n            this.algosHealth[selectedAlgoIndex].ad = Date.now();\n          } else {\n            this.algosHealth.push(new AlgoHealth(data.algoInstance, rs, Date.now()));\n          }\n        } else if (data.logLevel === Loglevel.Error.toString()) {\n          this.openDialog(data.algoInstance, data.algoid, data.message, data.messengerMethod, data.logTime);\n        }\n        //Do not add health pulse in to the log\n        if (data.logLevel !== Loglevel.Health.toString()) {\n          //this.logs.push(data);\n          this.logs.unshift(data);\n        }\n      }\n    });\n    this.chartAsObservable().subscribe(data => {\n      if (data !== undefined) {\n        //this.cds.unshift(data);\n        this.UpdateChart(data);\n      }\n    });\n    this.orderAsObservable().subscribe(data => {\n      if (data !== undefined) {\n        var selectedAlgoIndex = this.activeAlgos.findIndex(x => x.ains === data.algoinstance);\n        if (selectedAlgoIndex != -1) {\n          var selectedOrderIndex = this.activeAlgos[selectedAlgoIndex].orders.findIndex(function (e) {\n            e.orderid === data.orderid;\n          });\n          if (selectedOrderIndex != -1) {\n            this.activeAlgos[selectedAlgoIndex].orders[selectedOrderIndex] = data;\n          } else {\n            this.activeAlgos[selectedAlgoIndex].orders = this.activeAlgos[selectedAlgoIndex].orders.concat(data);\n          }\n          this.playordersound();\n        }\n      }\n    });\n    this.algoAsObservable().subscribe(data => {\n      if (data !== undefined) this._ras.push(this._ra);\n    });\n    //Code for GRPS Order Service\n    var pstatus = new PublishStatus();\n    pstatus.setStatus(true);\n    this.oclient.start();\n    this.oclient.send(pstatus);\n    this.oclient.onMessage(function (message) {\n      var results = message.toObject();\n      osubject.next(results);\n    });\n    //Code for GRPS Order Service\n    var cstatus = new CStatus();\n    cstatus.setStatus(true);\n    this.cclient.start();\n    this.cclient.send(cstatus);\n    this.cclient.onMessage(function (message) {\n      var results = message.toObject();\n      csubject.next(results);\n    });\n    //Code for GRPS Logger Service\n    var status = new Status();\n    status.setStatus(true);\n    this.client.start();\n    this.client.send(status);\n    this.client.onMessage(function (message) {\n      var results = message.toObject();\n      subject.next(results);\n    });\n    //this.cds.forEach((cd) => {\n    //  this.loadchartdata(cd)\n    //});\n  }\n\n  ngAfterViewInit() {\n    //this.cds.forEach((cd) => {\n    //  this.loadchartdata(cd)\n    //}); \n  }\n  //UpdateChart() {\n  //  chart.\n  //}\n  openSnackBar(message, action) {\n    this._snackBar.open(message, action, {\n      duration: 2000\n    });\n  }\n  playordersound() {\n    var context = new AudioContext();\n    this._sound = new Howl({\n      src: ['../assets/order.mp3'],\n      autoplay: false,\n      loop: false,\n      volume: 1.0,\n      onend: function () {\n        //console.log('Finished!');\n      }\n    });\n    context.resume();\n    this._sound.play();\n  }\n  checkhealth(alh) {\n    alh.forEach(x => {\n      if (x.ad < Date.now() - 60000) {\n        if (x.ah === true) {\n          var context = new AudioContext();\n          this._sound = new Howl({\n            src: ['../assets/stop.mp3'],\n            autoplay: false,\n            loop: false,\n            volume: 0.5,\n            onend: function () {\n              //console.log('Finished!');\n            }\n          });\n          context.resume();\n          this._sound.play();\n        }\n        x.ah = false;\n      }\n    });\n  }\n  UpdateChart(cd) {\n    var chart = this.charts.filter(x => x.id == cd.chartid)[0];\n    if (chart == undefined) {\n      //var canvas = <HTMLCanvasElement>document.getElementById(\"canvas\");\n      //var ctx = canvas.getContext(\"2d\");\n      //const ctx = document.getElementById('chartx').getContext('2d');\n      chart = new Chart(cd.chartid.toString(), {\n        type: 'line',\n        data: {\n          labels: [],\n          datasets: [\n            //{\n            //  type: 'line',\n            //  data: [] //this can be both x and y\n            //}\n          ]\n        },\n        options: {\n          //animation: {\n          //  duration: 0 // general animation time\n          //},\n          //hover: {\n          //  animationDuration: 0 // duration of animations when hovering an item\n          //},\n          //responsiveAnimationDuration: 0, // animation duration after a resize\n          responsive: true,\n          title: {\n            display: true,\n            text: 'Real Time Charts'\n          },\n          //elements: {\n          //  line: {\n          //    tension: 0 // disables bezier curves\n          //  }\n          //},\n          legend: {\n            display: false\n          },\n          scales: {\n            xAxes: [{\n              type: 'time',\n              distribution: 'series',\n              time: {\n                tooltipFormat: 'LTS'\n              },\n              ticks: {\n                callback: function (value, index, values) {\n                  if (!values[index]) {\n                    return;\n                  }\n                  return moment.utc(values[index]['value']).format('LTS');\n                }\n              }\n            }],\n            //xAxes: [{\n            //  display: true,\n            //  type: 'time',\n            //  distribution: 'series',\n            //  time: {\n            //    displayFormats: {\n            //      millisecond : 'HH:mm:ss'\n            //    }\n            //  }}],\n            yAxes: [{\n              id: '1',\n              type: 'linear',\n              position: 'left'\n            }, {\n              id: '2',\n              type: 'linear',\n              position: 'right'\n            }]\n          }\n        }\n      });\n      chart.id = cd.chartid;\n      this.charts.push(chart);\n    }\n    //chart.data.labels.filter(x => new Date(x).getSeconds() - (cd.t.seconds) > 500).remove();\n    if (chart.data.labels.length >= 1000) {\n      chart.data.labels.shift();\n      var mint = chart.data.labels[0];\n      chart.data.datasets.forEach(ds => {\n        if (ds.data[0] != undefined && ds.data[0].x.valueOf() < mint.valueOf()) {\n          ds.data.shift();\n        }\n      });\n      //chart.data.datasets.forEach((ds) => {\n      //  ds.data.shift();\n      //});\n    }\n    //var datetimestring = new Date(cd.t.seconds * 1000).toLocaleTimeString('en-US',\n    //  { hour: 'numeric', minute: 'numeric', second: 'numeric', hour12: false, timeZone: 'UTC' });\n    //var n = chart.data.labels.includes(datetimestring);\n    //if (!n) {\n    //  chart.data.labels.push(new Date(cd.t.seconds * 1000).toLocaleTimeString('en',\n    //    { hour: 'numeric', minute: 'numeric', second: 'numeric', hour12: false, timeZone: 'UTC' }));\n    //}\n    var n = chart.data.labels;\n    var nl = chart.data.labels.length;\n    if (nl == 0) {\n      chart.data.labels.push(new Date(cd.t.seconds * 1000));\n    } else if (n[nl - 1].valueOf() != cd.t.seconds * 1000) {\n      chart.data.labels.push(new Date(cd.t.seconds * 1000));\n    }\n    //if (!n) {\n    //  chart.data.labels.push(new Date(cd.t.seconds * 1000));\n    //}\n    if (chart.data.datasets.length == 0) {\n      chart.data.datasets = [];\n    }\n    //var ds = chart.data.datasets.filter(x => x.label == cd.instrumenttoken.toString());\n    var ds = chart.data.datasets.find(x => x.label == cd.instrumenttoken.toString());\n    //if (ds.length == 0) {\n    if (ds == undefined) {\n      //ds = [];\n      //var obj = {\n      //  type: \"line\", label: cd.instrumenttoken.toString(), data: [], borderColor: \"#3cba9f\", backgroundColor: \"#ffff00\", fill: false\n      //};\n      var ds = {\n        //borderColor: \"#3cba9f\"\n        type: \"line\",\n        label: cd.instrumenttoken.toString(),\n        data: [],\n        borderColor: cd.arg,\n        backgroundColor: \"#ffff00\",\n        fill: false,\n        yAxisID: cd.chartdataid.toString()\n      };\n      //var jsonobj = JSON.parse(obj)\n      //chart.data.datasets.push(obj);\n      //ds.push(obj);\n      chart.data.datasets.push(ds);\n    }\n    //ds.data.push(cd.d);\n    //chart.data.datasets.push(ds);\n    var xy = {\n      x: new Date(cd.t.seconds * 1000),\n      y: cd.d\n    };\n    //chart.data.datasets.find(x => x.label == cd.instrumenttoken.toString()).data.push(cd.d);\n    var m = chart.data.datasets.find(x => x.label == cd.instrumenttoken.toString()).data;\n    var ml = m.length;\n    if (ml == 0) {\n      chart.data.datasets.find(x => x.label == cd.instrumenttoken.toString()).data.push(xy);\n    } else if (m[ml - 1].x.valueOf() != cd.t.seconds * 1000) {\n      chart.data.datasets.find(x => x.label == cd.instrumenttoken.toString()).data.push(xy);\n    }\n    //chart.data.datasets[cd.chartdataid - 1].yAxisID = cd.chartdataid.toString();\n    //chart.data.datasets.find(x => x.label == cd.instrumenttoken.toString()).yAxisID = cd.chartdataid.toString();\n    //chart.data.datasets.filter(x => x.label == cd.instrumenttoken.toString())[0].data.push(cd.d);\n    //ds[0].data.push(cd.d);\n    //if (chart.data.datasets.length < cd.chartdataid) {\n    //  if (chart.data.datasets.length == 0) {\n    //    chart.data.datasets = [];\n    //  }\n    //  var obj = {\n    //    type: \"line\", label: cd.instrumenttoken.toString(), data: [], borderColor: \"#3cba9f\", backgroundColor: \"#ffff00\", fill: false};\n    //    //var jsonobj = JSON.parse(obj)\n    //  chart.data.datasets.push(obj);\n    //  //chart.data.datasets[cd.chartdataid - 1].data = [];\n    //  //chart.data.datasets[cd.chartdataid - 1].type = 'line';\n    //}\n    //chart.data.datasets[cd.chartdataid - 1].data.push(cd.d);\n    chart.update();\n  }\n  //loadchartdata(cd) {\n  //  var chart = this.charts.filter(x => x.id == cd.cid)[0];\n  //  if (chart == undefined) {\n  //      var canvas = document.createElement(\"canvas\");\n  //      canvas.id = cd.chartid;\n  //      document.getElementById('div1').appendChild(canvas);\n  //      // ----- more code ------ \n  //      setTimeout(function () {\n  //        chart = new Chart(cd.chartid, { type: 'line' });\n  //        this.charts.push(chart);\n  //      }, 1);\n  //    }\n  //    chart.data.labels = cd.map(x => x.t);\n  //    if (chart.data.datasets.count < cd.chartdataid) {\n  //      chart.data.datasets = [];\n  //    }\n  //  chart.data.datasets[cd.chartdataid - 1].data = cd.map(x => x.d);\n  //  chart.data.datasets[cd.chartdataid - 1].type = 'line';\n  //    chart.update();\n  //  //this.charts = new Chart('canvas', {\n  //  //  type: 'line'\n  //  //  //,\n  //  //  //data: {\n  //  //  //  labels: ['Jan', 'Feb', 'Mar', 'Apr'],\n  //  //  //  datasets: [\n  //  //  //    {\n  //  //  //      type: 'line'\n  //  //  //      //data: [10,20,30,40]\n  //  //  //    }\n  //  //  //  ]\n  //  //  //}\n  //  //});\n  //}\n  gethealthstatus(an) {\n    var selectedAlgoIndex = this.algosHealth.findIndex(x => x.aIns === an);\n    if (selectedAlgoIndex != -1) {\n      return this.algosHealth[selectedAlgoIndex].ah;\n    } else {\n      return false;\n    }\n  }\n  getTokens() {\n    this.http.get(this._baseUrl + 'api/home').subscribe(result => {\n      this.openSnackBar(result.toString(), \"Tokens Loaded\");\n    }, error => console.error(error));\n  }\n  getKotakTokens() {\n    this.http.get(this._baseUrl + 'api/kotaklogin').subscribe(result => {\n      this.openSnackBar(result.toString(), \"Tokens Loaded\");\n    }, error => console.error(error));\n  }\n  openDialog(ain, algo, message, source, time) {\n    this.dialog.open(ErrorDialog, {\n      data: {\n        ain: ain,\n        algo: algo,\n        message: message,\n        source: source,\n        time: new Date(time.seconds * 1000).toLocaleString()\n      }\n    });\n  }\n  stopExchangeUpdates() {\n    this.ts.stopExchangeUpdates();\n  }\n  //openDialog(): void {\n  //  const dialogRef = this.dialog.open(DialogOverviewExampleDialog, {\n  //    width: '250px',\n  //    data: {name: this.name, animal: this.animal}\n  //  });\n  //get Expiry\n  getExpiry(token, ctrl) {\n    this.http.get(this._baseUrl + 'api/' + ctrl + '/' + token.value).subscribe(result => {\n      this.expiry = result;\n    }, error => console.error(error));\n  }\n  //get call put options\n  getOption(token, expval, ctrl) {\n    this.http.get(this._baseUrl + 'api/' + ctrl + '/' + token.value + '/' + expval.value).subscribe(result => {\n      this.options = result;\n      this.call = this.options.filter(function (item) {\n        return item.type.toLowerCase() === 'ce';\n      });\n      this.put = this.options.filter(function (item) {\n        return item.type.toLowerCase() === 'pe';\n      });\n    }, error => console.error(error));\n  }\n  onSelectInstrument(instid, ctrl) {\n    this.selectedInst = instid;\n    this.getExpiry(instid, ctrl);\n  }\n  onSelectExpiry(expval, ctrl) {\n    this.selectedExpiry = expval.value;\n    this.getOption(this.selectedInst, expval, ctrl);\n  }\n  onSelectExpiries(expval, ctrl, num) {\n    if (num == \"1\") {\n      this.selectedExpiry = expval.value;\n      this.getOption(this.selectedInst, expval, ctrl);\n    }\n    if (num == \"2\") {\n      this.selectedExpiry2 = expval.value;\n      this.getOption(this.selectedInst, expval, ctrl);\n    }\n  }\n  onSelectCall(e) {\n    this.selectedCallValue = e.value;\n  }\n  onSelectPut(e) {\n    this.selectedPutValue = e.value;\n  }\n  onPSChange(e) {\n    this.ps = e.checked;\n  }\n  onSSChange(e) {\n    this.ss = e.checked;\n  }\n  onIntDChange(e) {\n    this.intd = e.checked;\n  }\n  onFOChange(e) {\n    this.ss = e.checked;\n  }\n  onStraddleChange(e) {\n    this.straddle = e.checked;\n  }\n  onCmbChange(e) {\n    this.cmb = e.checked;\n  }\n  onIVChange(e) {\n    this.ivc = e.checked;\n  }\n  onOIChange(e) {\n    this.oic = e.checked;\n  }\n  onEACChange(e) {\n    this.eac = e.checked;\n  }\n  onFutChange(e) {\n    this.fut = e.checked;\n  }\n  executeAlgo() {\n    const data = {\n      token: this.selectedInst.value,\n      expiry: this.selectedExpiry,\n      ctf: this.momentumTradeOptionsForm.value.ctf,\n      quantity: this.momentumTradeOptionsForm.value.quantity,\n      ps: this.ps,\n      mlpt: this.momentumTradeOptionsForm.value.mlpt\n    };\n    this.http.post(this._baseUrl + 'api/momentumvolume', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executeRsiCross() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry: this.selectedExpiry,\n      ctf: this.rsiCrossOptionsForm.value.ctf,\n      qty: this.rsiCrossOptionsForm.value.qty,\n      //rmx: this.rsiCrossOptionsForm.value.rmx,\n      mindfbi: this.rsiCrossOptionsForm.value.mindfbi,\n      dchl: this.rsiCrossOptionsForm.value.dchl\n    };\n    this.http.post(this._baseUrl + 'api/rsicross', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executeEMACross() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry: this.selectedExpiry,\n      ctf: this.emaCrossOptionsForm.value.ctf,\n      qty: this.emaCrossOptionsForm.value.qty,\n      sema: this.emaCrossOptionsForm.value.sema,\n      lema: this.emaCrossOptionsForm.value.lema,\n      sl: this.emaCrossOptionsForm.value.sl,\n      tp: this.emaCrossOptionsForm.value.tp\n    };\n    this.http.post(this._baseUrl + 'api/emacross', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executeStraddleMomentum() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry: this.selectedExpiry,\n      ctf: this.straddleMomentumOptionsForm.value.ctf,\n      qty: this.straddleMomentumOptionsForm.value.qty,\n      sl: this.straddleMomentumOptionsForm.value.sl,\n      tr: this.straddleMomentumOptionsForm.value.tr,\n      ss: this.straddleMomentumOptionsForm.value.ss\n    };\n    if (data.ss == \"\") {\n      data.ss = false;\n    }\n    this.http.post(this._baseUrl + 'api/momentumstraddle', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executeSARScalping() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry: this.selectedExpiry,\n      qty: this.sarForm.value.qty,\n      sl: this.sarForm.value.sl,\n      tp: this.sarForm.value.tp,\n      vt: this.sarForm.value.vt,\n      th: this.sarForm.value.th,\n      uid: this.sarForm.value.uid,\n      fo: this.sarForm.value.fo\n    };\n    if (data.fo == \"\") {\n      data.fo = false;\n    }\n    this.http.post(this._baseUrl + 'api/sar', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executeStraddleOnIndexRange() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry: this.selectedExpiry,\n      qty: this.straddleOnIndexRangeForm.value.qty,\n      sl: this.straddleOnIndexRangeForm.value.sl,\n      tr: this.straddleOnIndexRangeForm.value.tp,\n      uid: this.straddleOnIndexRangeForm.value.uid\n    };\n    this.http.post(this._baseUrl + 'api/straddleindexrange', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executeStraddleLegsCutoff() {\n    const data = {\n      btoken: this.selectedInst.value,\n      qty: this.straddleForm.value.qty,\n      uid: this.straddleForm.value.uid\n    };\n    this.http.post(this._baseUrl + 'api/straddle', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executeInitialStraddle() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry: this.selectedExpiry,\n      ctf: this.straddleMomentumOptionsForm.value.ctf,\n      qty: this.straddleMomentumOptionsForm.value.qty,\n      sl: this.straddleMomentumOptionsForm.value.sl,\n      tr: this.straddleMomentumOptionsForm.value.tr\n    };\n    this.http.post(this._baseUrl + 'api/referencestraddle', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executeDeltaStrangle() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry: this.selectedExpiry,\n      iqty: this.deltaStrangleForm.value.iqty,\n      stepqty: this.deltaStrangleForm.value.stepqty,\n      maxqty: this.deltaStrangleForm.value.maxqty,\n      idelta: this.deltaStrangleForm.value.idelta,\n      i2delta: this.deltaStrangleForm.value.ridelta,\n      maxdelta: this.deltaStrangleForm.value.maxdelta,\n      mindelta: this.deltaStrangleForm.value.mindelta,\n      sl: this.deltaStrangleForm.value.sl,\n      tp: this.deltaStrangleForm.value.tp,\n      l1: this.deltaStrangleForm.value.l1,\n      l2: this.deltaStrangleForm.value.l2,\n      u1: this.deltaStrangleForm.value.u1,\n      u2: this.deltaStrangleForm.value.u2\n    };\n    this.http.post(this._baseUrl + 'api/deltastrangle', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executePAWithLevels() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry: this.selectedExpiry,\n      ctf: this.paWithLevelsForm.value.ctf,\n      pd_h: this.paWithLevelsForm.value.pd_h,\n      pd_l: this.paWithLevelsForm.value.pd_l,\n      pd_c: this.paWithLevelsForm.value.pd_c,\n      pd_bh: this.paWithLevelsForm.value.pd_bh,\n      pd_bl: this.paWithLevelsForm.value.pd_bl,\n      pw_h: this.paWithLevelsForm.value.pw_h,\n      pw_l: this.paWithLevelsForm.value.pw_l,\n      pw_c: this.paWithLevelsForm.value.pw_c,\n      ps_h: this.paWithLevelsForm.value.ps_h,\n      //ps_l: this.paWithLevelsForm.value.ps_l,\n      uid: this.paWithLevelsForm.value.uid,\n      tp: this.paWithLevelsForm.value.tp,\n      sl: this.paWithLevelsForm.value.sl,\n      qty: this.paWithLevelsForm.value.qty\n    };\n    this.http.post(this._baseUrl + 'api/priceaction', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executeOptionSellOnHT() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry: this.selectedExpiry,\n      ctf: this.optionsellonhtForm.value.ctf,\n      uid: this.optionsellonhtForm.value.uid,\n      tp: this.optionsellonhtForm.value.tp,\n      qty: this.optionsellonhtForm.value.qty,\n      intd: this.optionsellonhtForm.value.intd\n    };\n    if (data.intd == \"\") {\n      data.intd = false;\n    }\n    this.http.post(this._baseUrl + 'api/optionsellonht', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executeMultiTimeSellOnHT() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry: this.selectedExpiry,\n      ctf: this.multitimeframesellonhtForm.value.ctf,\n      uid: this.multitimeframesellonhtForm.value.uid,\n      tp: this.multitimeframesellonhtForm.value.tp,\n      qty: this.multitimeframesellonhtForm.value.qty\n    };\n    this.http.post(this._baseUrl + 'api/multitimeframesellonht', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executetj3() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry: this.selectedExpiry,\n      ctf: this.tj3Form.value.ctf,\n      pd_h: this.tj3Form.value.pd_h,\n      pd_l: this.tj3Form.value.pd_l,\n      pd_c: this.tj3Form.value.pd_c,\n      pd_bh: this.tj3Form.value.pd_bh,\n      pd_bl: this.tj3Form.value.pd_bl,\n      pw_h: this.tj3Form.value.pw_h,\n      pw_l: this.tj3Form.value.pw_l,\n      pw_c: this.tj3Form.value.pw_c,\n      ps_h: this.tj3Form.value.ps_h,\n      //ps_l: this.tj3Form.value.ps_l,\n      uid: this.tj3Form.value.uid,\n      tp: this.tj3Form.value.tp,\n      sl: this.tj3Form.value.sl,\n      qty: this.tj3Form.value.qty\n    };\n    this.http.post(this._baseUrl + 'api/tj3', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executetj4() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry: this.selectedExpiry,\n      ctf: this.tj4Form.value.ctf,\n      pd_h: this.tj4Form.value.pd_h,\n      pd_l: this.tj4Form.value.pd_l,\n      pd_c: this.tj4Form.value.pd_c,\n      pd_bh: this.tj4Form.value.pd_bh,\n      pd_bl: this.tj4Form.value.pd_bl,\n      pw_h: this.tj4Form.value.pw_h,\n      pw_l: this.tj4Form.value.pw_l,\n      pw_c: this.tj4Form.value.pw_c,\n      ps_h: this.tj4Form.value.ps_h,\n      //ps_l: this.tj4Form.value.ps_l,\n      uid: this.tj4Form.value.uid,\n      tp: this.tj4Form.value.tp,\n      sl: this.tj4Form.value.sl,\n      qty: this.tj4Form.value.qty\n    };\n    this.http.post(this._baseUrl + 'api/tj4', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executetj5() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry: this.selectedExpiry,\n      ctf: this.tj5Form.value.ctf,\n      uid: this.tj5Form.value.uid,\n      tp: this.tj5Form.value.tp,\n      sl: this.tj5Form.value.sl,\n      qty: this.tj5Form.value.qty\n    };\n    this.http.post(this._baseUrl + 'api/tj5', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executebc() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry: this.selectedExpiry,\n      ctf: this.bcForm.value.ctf,\n      uid: this.bcForm.value.uid,\n      tp: this.bcForm.value.tp,\n      qty: this.bcForm.value.qty\n    };\n    this.http.post(this._baseUrl + 'api/bc', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executebc2() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry: this.selectedExpiry,\n      ctf: this.bcForm.value.ctf,\n      uid: this.bcForm.value.uid,\n      tp: this.bcForm.value.tp,\n      qty: this.bcForm.value.qty\n    };\n    this.http.post(this._baseUrl + 'api/bc2', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executePAScalping() {\n    const data = {\n      btoken: this.selectedInst.value,\n      uid: this.paScalpingForm.value.uid,\n      ctf: this.paScalpingForm.value.ctf,\n      qty: this.paScalpingForm.value.qty\n    };\n    this.http.post(this._baseUrl + 'api/candlewickscalping', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executeEMAScalpingKB() {\n    const data = {\n      btoken: this.selectedInst.value,\n      uid: this.paScalpingForm.value.uid,\n      ctf: this.paScalpingForm.value.ctf,\n      qty: this.paScalpingForm.value.qty\n    };\n    this.http.post(this._baseUrl + 'api/emascalpingkb', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executeSIM() {\n    const data = {\n      btoken: this.selectedInst.value,\n      uid: this.simForm.value.uid,\n      ctf: this.simForm.value.ctf,\n      qty: this.simForm.value.qty,\n      slpt: this.simForm.value.slpt,\n      tp: this.simForm.value.tp,\n      mns: this.simForm.value.mns\n    };\n    this.http.post(this._baseUrl + 'api/stockmomentum', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executeMA() {\n    const data = {\n      btoken: this.selectedInst.value,\n      uid: this.maForm.value.uid,\n      ctf: this.maForm.value.ctf,\n      qty: this.maForm.value.qty,\n      slpt: this.maForm.value.slpt,\n      tp: this.maForm.value.tp,\n      mns: this.maForm.value.mns\n    };\n    this.http.post(this._baseUrl + 'api/marketalerts', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executeIBScalping() {\n    const data = {\n      btoken: this.selectedInst.value,\n      uid: this.ibForm.value.uid,\n      ctf: this.ibForm.value.ctf,\n      qty: this.ibForm.value.qty\n    };\n    this.http.post(this._baseUrl + 'api/initialbreakout', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executeActiveBuyStrangle() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry: this.selectedExpiry,\n      iqty: this.deltaStrangleForm.value.iqty,\n      stepqty: this.deltaStrangleForm.value.stepqty,\n      maxqty: this.deltaStrangleForm.value.maxqty,\n      idelta: this.deltaStrangleForm.value.idelta,\n      maxdelta: this.deltaStrangleForm.value.maxdelta,\n      mindelta: this.deltaStrangleForm.value.mindelta,\n      sl: this.deltaStrangleForm.value.sl,\n      tp: this.deltaStrangleForm.value.tp\n    };\n    this.http.post(this._baseUrl + 'api/activebuystrangle', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executeAlerts() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry: this.selectedExpiry,\n      ctf: this.generateAlertForm.value.ctf,\n      csp: this.generateAlertForm.value.csp\n    };\n    this.http.post(this._baseUrl + 'api/alert', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executeOptionBuyWithStraddle() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry: this.selectedExpiry,\n      ctf: this.straddleMomentumOptionsForm.value.ctf,\n      qty: this.straddleMomentumOptionsForm.value.qty,\n      sl: this.straddleMomentumOptionsForm.value.sl,\n      tr: this.straddleMomentumOptionsForm.value.tr,\n      ss: this.straddleMomentumOptionsForm.value.ss\n    };\n    if (data.ss == \"\") {\n      data.ss = false;\n    }\n    this.http.post(this._baseUrl + 'api/momentumstraddle', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executeExpiryStraddleTrade() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry: this.selectedExpiry,\n      ctf: this.estForm.value.ctf,\n      qty: this.estForm.value.qty,\n      sl: this.estForm.value.sl,\n      tp: this.estForm.value.tp,\n      tr: this.estForm.value.tr,\n      uid: this.estForm.value.uid,\n      spi: this.estForm.value.spi,\n      intraday: this.estForm.value.intd\n    };\n    if (data.intraday == \"\") {\n      data.intraday = false;\n    }\n    this.http.post(this._baseUrl + 'api/straddleexpirytrade', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executePremiumCross() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry: this.selectedExpiry,\n      qty: this.premiumCrossForm.value.qty,\n      tp: this.premiumCrossForm.value.tp\n    };\n    this.http.post(this._baseUrl + 'api/premiumcross', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executeOptionOptimizer() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry: this.selectedExpiry\n    };\n    this.http.post(this._baseUrl + 'api/optionoptimizer', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executeExpiryStrangle() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry: this.selectedExpiry,\n      iqty: this.expiryStrangleForm.value.iqty,\n      mqty: this.expiryStrangleForm.value.mqty,\n      sqty: this.expiryStrangleForm.value.sqty,\n      tp: this.expiryStrangleForm.value.tp,\n      sl: this.expiryStrangleForm.value.sl,\n      idfbi: this.expiryStrangleForm.value.idfbi,\n      mdfbi: this.expiryStrangleForm.value.mdfbi,\n      mptt: this.expiryStrangleForm.value.mptt\n    };\n    this.http.post(this._baseUrl + 'api/expirystrangle', data).subscribe(result => {\n      if (this.activeAlgos == undefined) {\n        this.activeAlgos = [];\n      }\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executeStrangleWithLevels() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry: this.selectedExpiry,\n      idelta: this.levelsStrangleForm.value.idelta,\n      mindelta: this.levelsStrangleForm.value.mindelta,\n      maxdelta: this.levelsStrangleForm.value.maxdelta,\n      iqty: this.levelsStrangleForm.value.iqty,\n      sqty: this.levelsStrangleForm.value.sqty,\n      mqty: this.levelsStrangleForm.value.mqty,\n      tp: this.levelsStrangleForm.value.tp,\n      sl: this.levelsStrangleForm.value.sl,\n      l1: this.levelsStrangleForm.value.l1,\n      l2: this.levelsStrangleForm.value.l2,\n      u1: this.levelsStrangleForm.value.u1,\n      u2: this.levelsStrangleForm.value.u2,\n      intraday: this.levelsStrangleForm.value.intd,\n      ctf: this.levelsStrangleForm.value.ctf\n    };\n    if (data.intraday == \"\") {\n      data.intraday = false;\n    }\n    this.http.post(this._baseUrl + 'api/stranglewithlevels', data).subscribe(result => {\n      if (this.activeAlgos == undefined) {\n        this.activeAlgos = [];\n      }\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executeIVSpread() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry1: this.selectedExpiry,\n      expiry2: this.selectedExpiry2,\n      qty: this.ivSpreadForm.value.qty,\n      tp: this.ivSpreadForm.value.tp\n    };\n    this.http.post(this._baseUrl + 'api/ivtrade', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executeCalendarSpread() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry1: this.selectedExpiry,\n      expiry2: this.selectedExpiry2,\n      openvar: this.calendarSpreadForm.value.ovar,\n      closevar: this.calendarSpreadForm.value.cvar,\n      stepqty: this.calendarSpreadForm.value.sqty,\n      maxqty: this.calendarSpreadForm.value.maxqty,\n      to: this.calendarSpreadForm.value.sl,\n      sl: this.calendarSpreadForm.value.sl,\n      tp: this.calendarSpreadForm.value.tp,\n      straddle: this.calendarSpreadForm.value.straddle\n    };\n    this.http.post(this._baseUrl + 'api/calendarspread', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executedirectiononhistoricalaverage() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry1: this.selectedExpiry,\n      openvar: this.directiononhistoricalaverageForm.value.ovar,\n      closevar: this.directiononhistoricalaverageForm.value.cvar,\n      stepqty: this.directiononhistoricalaverageForm.value.sqty,\n      maxqty: this.directiononhistoricalaverageForm.value.maxqty,\n      to: this.directiononhistoricalaverageForm.value.sl,\n      sl: this.directiononhistoricalaverageForm.value.sl,\n      tp: this.directiononhistoricalaverageForm.value.tp\n    };\n    this.http.post(this._baseUrl + 'api/directionaloptionsell', data).subscribe(result => {\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executeStrangleChart() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry1: this.selectedExpiry,\n      expiry2: this.selectedExpiry2,\n      it1: this.strangleChartForm.value.it1,\n      it2: this.strangleChartForm.value.it2,\n      s1: this.strangleChartForm.value.s1,\n      s2: this.strangleChartForm.value.s2,\n      cmb: this.strangleChartForm.value.cmb,\n      oic: this.strangleChartForm.value.oic,\n      ivc: this.strangleChartForm.value.ivc\n    };\n    if (data.cmb == \"\") {\n      data.cmb = false;\n    }\n    if (data.oic == \"\") {\n      data.oic = false;\n    }\n    if (data.ivc == \"\") {\n      data.ivc = false;\n    }\n    this.http.post(this._baseUrl + 'api/chart', data).subscribe(result => {\n      //this.activeAlgos.push(result);\n      //this.cd\n    }, error => console.error(error));\n  }\n  executeExpiryTrade() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry: this.selectedExpiry,\n      iqty: this.expiryTradeOptionsForm.value.iqty,\n      sqty: this.expiryTradeOptionsForm.value.sqty,\n      mqty: this.expiryTradeOptionsForm.value.mqty,\n      sl: this.expiryTradeOptionsForm.value.sl,\n      mdfbi: this.expiryTradeOptionsForm.value.mdfbi,\n      mptt: this.expiryTradeOptionsForm.value.mptt\n    };\n    this.http.post(this._baseUrl + 'api/expirystrangle', data).subscribe(result => {\n      if (this.activeAlgos == undefined) {\n        this.activeAlgos = [];\n      }\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executeSellOnRsiTrade() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry: this.selectedExpiry,\n      qty: this.sellwithRSIOptionsForm.value.qty,\n      ctf: this.sellwithRSIOptionsForm.value.ctf,\n      ema: this.sellwithRSIOptionsForm.value.ema,\n      rlle: this.sellwithRSIOptionsForm.value.rlle,\n      rule: this.sellwithRSIOptionsForm.value.rule,\n      rmx: this.sellwithRSIOptionsForm.value.rmx,\n      rlx: this.sellwithRSIOptionsForm.value.rlx,\n      mindfbi: this.sellwithRSIOptionsForm.value.mindfbi,\n      dchl: this.sellwithRSIOptionsForm.value.dchl\n    };\n    this.http.post(this._baseUrl + 'api/rsistrangle', data).subscribe(result => {\n      if (this.activeAlgos == undefined) {\n        this.activeAlgos = [];\n      }\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  executeBuyOnRsiTrade() {\n    const data = {\n      btoken: this.selectedInst.value,\n      expiry: this.selectedExpiry,\n      qty: this.buywithRSIOptionsForm.value.qty,\n      ctf: this.buywithRSIOptionsForm.value.ctf,\n      ema: this.buywithRSIOptionsForm.value.ema,\n      tp: this.buywithRSIOptionsForm.value.tp,\n      sl: this.buywithRSIOptionsForm.value.sl,\n      rulx: this.buywithRSIOptionsForm.value.rulx,\n      rlle: this.buywithRSIOptionsForm.value.rlle,\n      cell: this.buywithRSIOptionsForm.value.cell,\n      peul: this.buywithRSIOptionsForm.value.peul,\n      maxdfbi: this.buywithRSIOptionsForm.value.maxdfbi,\n      edchl: this.buywithRSIOptionsForm.value.edchl,\n      xdchl: this.buywithRSIOptionsForm.value.xdchl,\n      eac: this.buywithRSIOptionsForm.value.eac,\n      fut: this.buywithRSIOptionsForm.value.fut\n    };\n    if (data.eac == \"\") {\n      data.eac = false;\n    }\n    if (data.fut == \"\") {\n      data.fut = false;\n    }\n    this.http.post(this._baseUrl + 'api/rsitrade', data).subscribe(result => {\n      if (this.activeAlgos == undefined) {\n        this.activeAlgos = [];\n      }\n      this.activeAlgos.push(result);\n    }, error => console.error(error));\n  }\n  startstopalgo(ain, aid, s) {\n    var ctrl = \"\";\n    //switch (aid) {\n    //  case \"1\":\n    //    ctrl = \"deltastrangle\";\n    //    break;\n    //  case \"10\":\n    //    ctrl = \"activebuystrangle\";\n    //    break;\n    //  case \"20\":\n    //    ctrl = \"rsitrade\";\n    //    break;\n    //  case \"18\":\n    //    ctrl = \"rsicross\";\n    //    break;\n    //  case \"19\":\n    //    ctrl = \"rsistrangle\";\n    //    break;\n    //  case \"17\":\n    //    ctrl = \"momentumvolume\";\n    //    break;\n    //  case \"15\":\n    //    ctrl = \"emacross\";\n    //    break;\n    //  case \"14\":\n    //    ctrl = \"expirystrangle\";\n    //    break;\n    //  case \"21\":\n    //    ctrl = \"straddle\";\n    //    break;\n    //  case \"22\":\n    //    ctrl = \"premiumcross\";\n    //    break;\n    //  case \"23\":\n    //    ctrl = \"momentumstraddle\";\n    //    break;\n    //  case \"24\":\n    //    ctrl = \"referencestraddle\";\n    //    break;\n    //  case \"25\":\n    //    ctrl = \"ivtrade\";\n    //    break;\n    //  case \"26\":\n    //    ctrl = \"chart\";\n    //    break;\n    //  case \"28\":\n    //    ctrl = \"calendarspread\";\n    //    break;\n    //  case \"29\":\n    //    ctrl = \"stranglewithlevels\";\n    //    break;\n    //  case \"30\":\n    //    ctrl = \"alert\";\n    //    break;\n    //  case \"31\":\n    //    ctrl = \"directionaloptionsell\";\n    //    break;\n    //  case \"32\":\n    //    ctrl = \"priceaction\";\n    //    break;\n    //  case \"33\":\n    //    ctrl = \"straddleindexrange\";\n    //    break;\n    //  case \"35\":\n    //    ctrl = \"candlewickscalping\";\n    //    break;\n    //  case \"36\":\n    //    ctrl = \"initialbreakout\";\n    //    break;\n    //  case \"37\":\n    //    ctrl = \"stockmomentum\";\n    //    break;\n    //  case \"38\":\n    //    ctrl = \"straddle\";\n    //    break;\n    //  case \"39\":\n    //    ctrl = \"emascalpingkb\";\n    //    break;\n    //  case \"43\":\n    //    ctrl = \"marketalerts\";\n    //    break;\n    //  case \"44\":\n    //    ctrl = \"tj3\";\n    //    break;\n    //  case \"45\":\n    //    ctrl = \"tj4\";\n    //    break;\n    //  case \"46\":\n    //    ctrl = \"sar\";\n    //    break;\n    //  case \"47\":\n    //    ctrl = \"optionsellonht\";\n    //    break;\n    //  case \"48\":\n    //    ctrl = \"multitimeframesellonht\";\n    //    break;\n    //  default:\n    //    ctrl = \"home\";\n    //}\n    if (aid == \"1\") {\n      ctrl = \"deltastrangle\";\n    } else if (aid == \"10\") {\n      ctrl = \"activebuystrangle\";\n    } else if (aid == \"20\") {\n      ctrl = \"rsitrade\";\n    } else if (aid == \"18\") {\n      ctrl = \"rsicross\";\n    } else if (aid == \"19\") {\n      ctrl = \"rsistrangle\";\n    } else if (aid == \"17\") {\n      ctrl = \"momentumvolume\";\n    } else if (aid == \"15\") {\n      ctrl = \"emacross\";\n    } else if (aid == \"14\") {\n      ctrl = \"expirystrangle\";\n    } else if (aid == \"21\") {\n      ctrl = \"straddle\";\n    } else if (aid == \"22\") {\n      ctrl = \"premiumcross\";\n    } else if (aid == \"23\") {\n      ctrl = \"momentumstraddle\";\n    } else if (aid == \"24\") {\n      ctrl = \"referencestraddle\";\n    } else if (aid == \"25\") {\n      ctrl = \"ivtrade\";\n    } else if (aid == \"26\") {\n      ctrl = \"chart\";\n    } else if (aid == \"28\") {\n      ctrl = \"calendarspread\";\n    } else if (aid == \"29\") {\n      ctrl = \"stranglewithlevels\";\n    } else if (aid == \"30\") {\n      ctrl = \"alert\";\n    } else if (aid == \"31\") {\n      ctrl = \"directionaloptionsell\";\n    } else if (aid == \"32\") {\n      ctrl = \"priceaction\";\n    } else if (aid == \"33\") {\n      ctrl = \"straddleindexrange\";\n    }\n    if (aid == \"35\") {\n      ctrl = \"candlewickscalping\";\n    }\n    if (aid == \"36\") {\n      ctrl = \"initialbreakout\";\n    }\n    if (aid == \"37\") {\n      ctrl = \"stockmomentum\";\n    }\n    if (aid == \"38\") {\n      ctrl = \"straddle\";\n    }\n    if (aid == \"39\") {\n      ctrl = \"emascalpingkb\";\n    }\n    if (aid == \"43\") {\n      ctrl = \"marketalerts\";\n    }\n    if (aid == \"44\") {\n      ctrl = \"tj3\";\n    }\n    if (aid == \"45\") {\n      ctrl = \"tj4\";\n    }\n    if (aid == \"46\") {\n      ctrl = \"sar\";\n    }\n    if (aid == \"47\") {\n      ctrl = \"optionsellonht\";\n    }\n    if (aid == \"48\") {\n      ctrl = \"multitimeframesellonht\";\n    }\n    if (aid == \"50\") {\n      ctrl = \"tj5\";\n    }\n    if (aid == \"51\") {\n      ctrl = \"bc\";\n    }\n    if (aid == \"52\") {\n      ctrl = \"bc2\";\n    } else if (aid == \"53\") {\n      ctrl = \"straddleexpirytrade\";\n    }\n    const start = s;\n    this.http.put(this._baseUrl + 'api/' + ctrl + '/' + ain, start).subscribe(result => {\n      var message;\n      if (start == 1) {\n        message = \"The algo has started. Wait for the light to turn green!\";\n      } else {\n        message = \"The algo has stopped. Wait for the light to turn red!\";\n      }\n      ;\n      this.openSnackBar(message, \"\");\n    }, error => console.error(error));\n  }\n  startdsservice() {\n    const data = {\n      start: true\n    };\n    this.http.post(this._baseUrl + 'api/ws', data).subscribe(result => {\n      console.log(result);\n    }, error => console.error(error));\n  }\n  generatevolcdls() {\n    const start = 1;\n    this.http.post(this._baseUrl + 'api/candles', start).subscribe(result => {\n      var message;\n      message = \"Candles Started\";\n      this.openSnackBar(message, \"\");\n    }, error => console.error(error));\n  }\n};\nTradeComponent = __decorate([Component({\n  selector: 'app-trade',\n  templateUrl: './trade.component.html',\n  styleUrls: ['./trade.component.scss']\n}), __param(2, Inject('BASE_URL'))], TradeComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}